{% extends 'base.html.twig' %}

{% block title %}Détails du Quartier{% endblock %}

{% block stylesheets %}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<style>
    .clickable-row { cursor: pointer; }
    .clickable-row:hover { background-color: #f5f5f5; }
    .feature-box { display: flex; align-items: center; margin-bottom: 5px; }
    .feature-box .feature-box-icon { width: 2.7em; height: 2.7em; background-color: var(--primary); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 10px; color: white; }
    .feature-box-info { flex: 1; }
    .weather-popup { text-align: center; margin-top: 10px; }
</style>
{% endblock %}

{% block body %}
<h2 class="text-center mb-5">Détails du Quartier</h2>

<div class="card mb-4">
    <div class="card-body">
        <h4 class="card-title">Quartier n°{{ quartier.id }}</h4>
        <table class="table table-bordered mt-3">
            <tbody>
                <tr><th>Nom</th><td>{{ quartier.nom }}</td></tr>
                <tr><th>Consommation Totale</th><td>
                    {% set totalConsommation = 0 %}
                    {% for lampadaire in lampadaires %}
                        {% set totalConsommation = totalConsommation + lampadaire.consommation %}
                    {% endfor %}
                    {{ totalConsommation }} kWh
                </td></tr>
            </tbody>
        </table>
        <a href="{{ path('app_quartier_show_pdf', {'id': quartier.id}) }}" class="btn btn-danger mt-3 ms-2" target="_blank">
            <i class="fas fa-file-pdf"></i> Exporter en PDF
        </a>
    </div>
</div>

<div class="card mb-5">
    <div class="card-body">
        <h4 class="card-title">Liste des Lampadaires</h4>
        <table class="table table-hover mt-3">
            <thead>
                <tr>
                    <th>Localisation</th>
                    <th>Consommation</th>
                    <th>État</th>
                    <th>Date d'installation</th>
                    <th>Météo</th>
                </tr>
            </thead>
            <tbody>
                {% for lampadaire in lampadaires %}
                <tr class="clickable-row" data-localisation="{{ lampadaire.localisation }}" data-consommation="{{ lampadaire.consommation }}" data-etat="{{ lampadaire.etat }}">
                    <td>{{ lampadaire.localisation }}</td>
                    <td>{{ lampadaire.consommation }} kWh</td>
                    <td><span class="badge bg-{{ lampadaire.etat == 0 ? 'success' : 'danger' }}">{{ lampadaire.etat == 0 ? 'Actif' : 'Inactif' }}</span></td>
                    <td>{{ lampadaire.dateInstallation|date('d/m/Y') }}</td>
                    <td class="weather-data-{{ loop.index }}">
                        <div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<h3 class="text-center mb-4">Carte des Lampadaires</h3>
<div id="map" style="height: 400px; border-radius: 8px;"></div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
const map = L.map('map').setView([36.8065, 10.1815], 13);
let markers = [];
let bounds = L.latLngBounds();

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

const rows = document.querySelectorAll('.clickable-row');
let geocodedCount = 0;

rows.forEach((row, index) => {
    const localisation = row.dataset.localisation;
    const query = encodeURIComponent(localisation);

    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${query}`)
    .then(res => res.json())
    .then(data => {
        if (data.length > 0) {
            const lat = data[0].lat;
            const lon = data[0].lon;

            const marker = L.marker([lat, lon]).addTo(map)
                .bindPopup(`<strong>${localisation}</strong><br>Conso: ${row.dataset.consommation} kWh<br>État: ${row.dataset.etat == 0 ? 'Actif' : 'Inactif'}<div class="weather-popup-${index}"><div class="spinner-border spinner-border-sm text-primary"></div><div>Chargement...</div></div>`);
            
            markers.push(marker);
            bounds.extend([lat, lon]);
            row._marker = marker;
            marker._weatherIndex = index;

            fetchWeather(lat, lon, index);
        }
        geocodedCount++;
        if (geocodedCount === rows.length && markers.length > 0) {
            if (markers.length > 1) map.fitBounds(bounds);
            else map.setView(markers[0].getLatLng(), 16);
        }
    });
});

function fetchWeather(lat, lon, index) {
    const apiKey = '4d8fb5b93d4af21d66a2948710284366';
    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}&lang=fr`)
    .then(res => res.json())
    .then(data => updateWeather(data, index + 1))
    .catch(() => updateWeather(mockWeather(index), index + 1));
}

function mockWeather(index) {
    const types = [
        { main: 'Clear', description: 'ciel dégagé', icon: '01d', temp: 22 + index, wind: 3 },
        { main: 'Clouds', description: 'nuageux', icon: '02d', temp: 19 + index, wind: 4 }
    ];
    return { weather: [types[index % types.length]], main: { temp: types[index % types.length].temp }, wind: { speed: types[index % types.length].wind }};
}

function updateWeather(data, index) {
    const weather = data.weather[0];
    const temp = Math.round(data.main.temp);
    const wind = data.wind.speed;

    const icons = { Clear: 'fa-sun text-warning', Clouds: 'fa-cloud text-secondary', Rain: 'fa-cloud-showers-heavy text-primary' };
    const icon = icons[weather.main] || 'fa-cloud text-secondary';

    const cell = document.querySelector(`.weather-data-${index}`);
    if (cell) {
        cell.innerHTML = `<div class="feature-box"><div class="feature-box-icon"><i class="fas ${icon}"></i></div><div class="feature-box-info">${temp}°C, ${weather.description}<br><small><i class="fas fa-wind"></i> ${wind} m/s</small></div></div>`;
    }

    markers.forEach(marker => {
        if (marker._weatherIndex === index - 1) {
            marker.setPopupContent(marker.getPopup().getContent().replace(`<div class="weather-popup-${index - 1}"><div class="spinner-border spinner-border-sm text-primary"></div><div>Chargement...</div></div>`, `<div class="weather-popup"><strong>${temp}°C</strong><br>${weather.description}<br><i class="fas fa-wind"></i> ${wind} m/s</div>`));
        }
    });
}

rows.forEach(row => {
    row.addEventListener('click', () => {
        if (row._marker) {
            row._marker.openPopup();
            map.setView(row._marker.getLatLng(), 16);
        }
    });
});
</script>
{% endblock %}
